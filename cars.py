# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PCDOk5nbjvY-F-nUbmYL0mBXInUP89BY
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
from datetime import date

data = pd.read_csv('/kaggle/used_cars_data.csv')
data.info()

data= data.drop(['S.No.'],axis=1) # removing the s.no
data['Car_age']=date.today().year-data['Year']
data.info()
data.head()

data['Brand'] = data['Name'].str.split().str[0]
data['Model'] = data['Name'].str.split().str.get(1) + data.Name.str.split().str.get(2)
data[['Name','Brand','Model']]

#data cleaning/wrangling
data.Brand.unique()
#data.Model.unique()

searchfor = ['Isuzu' ,'ISUZU','Mini','Land']
data[data.Brand.str.contains('|'.join(searchfor))].head(5)

data.Brand.replace({"ISUZU":"Isuzu","Mini":"Mini Cooper","Land":"Land Rover"},inplace=True)

data.describe(include='all').T

#seperating categorical and numerical coloums
cat_cols=data.select_dtypes(include='object').columns
num_cols=data.select_dtypes(include='number').columns.tolist()
print("Categorical values:")
print(cat_cols)
print("Numerical values:")
print(num_cols)

for col in num_cols:
    print(col)
    print("Skew: ",round(data[col].skew(),2))
    plt.figure(figsize=(15,4))
    plt.subplot(1,2,1)
    data[col].hist(grid=False)
    plt.ylabel('count')
    plt.subplot(1,2,2)
    sns.boxplot(x=data[col])
    plt.show()

#now onto the categorical values
fig, axes = plt.subplots(3, 2, figsize=(18, 18))
fig.suptitle('Bar plot for all categorical variables in the dataset')

sns.countplot(ax=axes[0, 0], x='Fuel_Type', data=data, color='blue', order=data['Fuel_Type'].value_counts().index)
sns.countplot(ax=axes[0, 1], x='Transmission', data=data, color='blue', order=data['Transmission'].value_counts().index)
sns.countplot(ax=axes[1, 0], x='Owner_Type', data=data, color='blue', order=data['Owner_Type'].value_counts().index)
sns.countplot(ax=axes[1, 1], x='Location', data=data, color='blue', order=data['Location'].value_counts().index)
sns.countplot(ax=axes[2, 0], x='Brand', data=data, color='blue', order=data['Brand'].head(20).value_counts().index)
sns.countplot(ax=axes[2, 1], x='Model', data=data, color='blue', order=data['Model'].head(20).value_counts().index)

def log_transform(data,col):
    for colname in col:
        if (data[colname] == 1.0).all():
            data[colname + '_log'] = np.log(data[colname]+1)
        else:
            data[colname + '_log'] = np.log(data[colname])
    data.info()

log_transform(data,['Kilometers_Driven','Price'])

#Log transformation of the feature 'Kilometers_Driven'
sns.distplot(data["Kilometers_Driven_log"], axlabel="Kilometers_Driven_log");

plt.figure(figsize=(13,17))
sns.pairplot(data=data.drop(['Kilometers_Driven','Price'],axis=1))
plt.show()

fig, axarr = plt.subplots(4, 2, figsize=(12, 18))
data.groupby('Location')['Price_log'].mean().sort_values(ascending=False).plot.bar(ax=axarr[0][0], fontsize=12)
axarr[0][0].set_title("Location Vs Price", fontsize=18)
data.groupby('Transmission')['Price_log'].mean().sort_values(ascending=False).plot.bar(ax=axarr[0][1], fontsize=12)
axarr[0][1].set_title("Transmission Vs Price", fontsize=18)
data.groupby('Fuel_Type')['Price_log'].mean().sort_values(ascending=False).plot.bar(ax=axarr[1][0], fontsize=12)
axarr[1][0].set_title("Fuel_Type Vs Price", fontsize=18)
data.groupby('Owner_Type')['Price_log'].mean().sort_values(ascending=False).plot.bar(ax=axarr[1][1], fontsize=12)
axarr[1][1].set_title("Owner_Type Vs Price", fontsize=18)
data.groupby('Brand')['Price_log'].mean().sort_values(ascending=False).head(10).plot.bar(ax=axarr[2][0], fontsize=12)
axarr[2][0].set_title("Brand Vs Price", fontsize=18)
data.groupby('Model')['Price_log'].mean().sort_values(ascending=False).head(10).plot.bar(ax=axarr[2][1], fontsize=12)
axarr[2][1].set_title("Model Vs Price", fontsize=18)
data.groupby('Seats')['Price_log'].mean().sort_values(ascending=False).plot.bar(ax=axarr[3][0], fontsize=12)
axarr[3][0].set_title("Seats Vs Price", fontsize=18)
data.groupby('Car_Age')['Price_log'].mean().sort_values(ascending=False).plot.bar(ax=axarr[3][1], fontsize=12)
axarr[3][1].set_title("Car_Age Vs Price", fontsize=18)
plt.subplots_adjust(hspace=1.0)
plt.subplots_adjust(wspace=.5)
sns.despine()